/*
    Những mùa thu khác có thể trở về
Nhưng mùa thu của chúng ta đã chết...
*/
 
// #pragma GCC optimize("Ofast,O3") 
// #pragma GCC target("avx,avx2,fma,sse4")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
 
using namespace std;
using namespace __gnu_pbds;
 
typedef long long ll;
 
#ifdef Debug
#include "Debug.h"
#else
#define dbg(...)
#endif
 
#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; i++)
#define FORD(i,a,b) for(int i=(a),_b=(b); i>=_b; i--)
#define REP(i,a) for(int i=0,_a=(a); i<_a; i++)
 
#define F first
#define S second
#define MP make_pair
#define PB push_back
 
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define lb lower_bound
#define ub upper_bound
#define ins insert
 
#define nl "\n"
 
#define vi vector<long long>
#define vii vector<pair<long long, long long>>
#define pi pair<ll, ll>
 
template <class T>
using Tree =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
 
template<class X, class Y> bool ckmin(X& a, const Y& b) {return a > b ? a = b, 1 : 0;}
template<class X, class Y> bool ckmax(X& a, const Y& b) {return a < b ? a = b, 1 : 0;}
 
// const ll M = 1e9 + 9; // (1ll << 61) - 1
// mt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());
// const ll B = uniform_int_distribution<ll>(311, M - 1)(rng);
 
template <class T> class SegTree {
    private:
        const T DEFAULT = -1e18;
 
        vector<T> segtree;
        int sz;
    public:
        SegTree(int len) : sz(len), segtree(2 * len, DEFAULT) {}
 
        void set(int idx, T val) {
            idx += sz;
            segtree[idx] = val;
            for (;idx > 1; idx >>= 1) {
                segtree[idx >> 1] = max(segtree[idx], segtree[idx ^ 1]);
            }
        }
 
        T get(int l, int r) { // [l, r)
            T ans = DEFAULT;
            for (l += sz, r += sz; l < r; l >>= 1, r >>= 1) {
                if (l & 1)
                    ckmax(ans, segtree[l++]);
                if (r & 1)
                    ckmax(ans, segtree[--r]);
            }
            return ans;
        }
 
        T operator [] (int idx) {
            return segtree[idx + sz];
        }
};
 
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
 
    #ifdef Debug
    freopen("in.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    #endif
    int n, m, cnt = 0; cin >> n >> m;
    vector<vi> g(n);
    vi a(n), id(n), par(n), dep(n), sz(n), top(n);
    SegTree<ll> st(n);
    REP(i, n) cin >> a[i];
    REP(i, n - 1) {
        int u, v; cin >> u >> v;
        u--, v--;
        g[u].PB(v);
        g[v].PB(u);
    }
    function<void(int, int)> dfs = [&](int u, int p) {
        sz[u] = 1;
        par[u] = p;
        for (auto v : g[u]) {
            if (v == p) continue;
            dep[v] = dep[u] + 1;
            dfs(v, u);
            sz[u] += sz[v];
        }
    };
    dfs(0, 0);
    function<void(int, int, int)> hld = [&](int u, int p, int tp) {
        id[u] = cnt++;
        st.set(id[u], a[u]);
        top[u] = tp;
        int mx = -1, idx_mx = -1;
        for (auto v : g[u]) {
            if (v == p) continue;
            if (ckmax(mx, sz[v])) idx_mx = v;
        }
        if (idx_mx == -1) return;
        hld(idx_mx, u, tp);
        for (auto v : g[u]) {
            if (v == p || v == idx_mx) continue;
            hld(v, u, v);
        }
    };
    hld(0, 0, 0);
    function<ll(int, int)> path = [&](int x, int y) {
        ll ans = 0;
        while(top[x] != top[y]) {
            if (dep[top[x]] < dep[top[y]]) swap(x, y);
            ckmax(ans, st.get(id[top[x]], id[x] + 1));
            x = par[top[x]];
        }
        if (id[x] > id[y]) swap(x, y);
        ckmax(ans, st.get(id[x], id[y] + 1));
        return ans;
    };
    dbg(id);
    REP(i, m) {
        int t, x, y; cin >> t >> x >> y;
        if (t == 1) {
            x--;
            st.set(id[x], y);
        }
        else {
            cout << path(x - 1, y - 1) << " ";
        }
    }
    return 0;
}