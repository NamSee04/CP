/*
    Những mùa thu khác có thể trở về
Nhưng mùa thu của chúng ta đã chết...
*/

// #pragma GCC optimize("Ofast,O3") 
// #pragma GCC target("avx,avx2,fma,sse4")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;

#ifdef Debug
#include "./namsee_lib/Debug.h"
#else
#define dbg(...)
#endif

#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; i++)
#define FORD(i,a,b) for(int i=(a),_b=(b); i>=_b; i--)
#define REP(i,a) for(int i=0,_a=(a); i<_a; i++)

#define F first
#define S second
#define MP make_pair
#define PB push_back

#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define lb lower_bound
#define ub upper_bound
#define ins insert

#define nl "\n"

#define vi vector<long long>
#define vii vector<pair<long long, long long>>
#define pi pair<ll, ll>

template <class T>
using Tree =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

template<class X, class Y> bool ckmin(X& a, const Y& b) {return a > b ? a = b, 1 : 0;}
template<class X, class Y> bool ckmax(X& a, const Y& b) {return a < b ? a = b, 1 : 0;}

// const ll M = 1e9 + 9; // (1ll << 61) - 1
// mt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());
// const ll B = uniform_int_distribution<ll>(311, M - 1)(rng);

struct node
{
    int val = 0;
    int lz = 0;
};

vector<node> a;

void pushDown(int idx) {
    a[idx * 2].lz += a[idx].lz;
    a[idx * 2 + 1].lz += a[idx].lz;
    a[idx * 2].val += a[idx].lz;
    a[idx * 2 + 1].val += a[idx].lz;

    a[idx].lz = 0;
}

void upd(int idx, int l, int r, int u, int v, int val) {
    if (r < u || l > v) {
        return;
    }
    if (l >= u && r <= v) {
        a[idx].lz += val;
        a[idx].val += val;
        return;
    }
    pushDown(idx);
    upd(idx * 2, l, (l + r) / 2, u, v, val);
    upd(idx * 2 + 1, (l + r) / 2 + 1, r, u, v, val);
    a[idx].val = max(a[idx * 2].val, a[idx * 2 + 1].val);
}

int get(int idx, int l, int r, int u, int v) {
    if (r < u || l > v) {
        return -1e9;
    }
    if (l >= u && r <= v) {
        return a[idx].val;
    }
    pushDown(idx);
    int mid = (l + r) / 2;
    return max(get(2 * idx, l, mid, u, v), get(2 * idx + 1, mid + 1, r, u, v));
}



int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    #ifdef Debug
    freopen("in.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    #endif

    int t; cin >> t;
    while (t--) {
        int n; cin >> n;
        vector<int> st(n + 1), en(n + 1), p(n + 1), dep(n + 1);
        int timer = 1;
        a.clear();
        a.resize(4 * n + 10);
        vector<vector<int>> g(n + 1);
        FOR(i, 1, n - 1) {
            int u, v; cin >> u >> v;
            g[u].PB(v);
            g[v].PB(u);
        }
        function<void(int, int)> dfs =[&] (int u, int par) {
            dbg(u)
            st[u] = timer++;
            for (auto v : g[u]) {
                if (v == par) continue;
                p[v] = u;
                dep[v] = dep[u] + 1;
                dfs(v, u);
            } 
            en[u] = timer - 1;
        };
        dfs(1, 0);
        // reroot from root u to node v
        function<void(int, int)> re_root = [&](int u, int v) {
            if (p[v] == u) {
                int l = st[v], r = en[v];
                upd(1, 1, n, l, r, -1);
                if (r < n) upd(1, 1, n, r + 1, n, 1);
                if (l > 1) upd(1, 1, n, 1, l - 1, 1);
            }
            else {
                int l = st[u], r = en[u];
                upd(1, 1, n, l, r, 1);
                if (r < n) upd(1, 1, n, r + 1, n, -1);
                if (l > 1) upd(1, 1, n, 1, l - 1, -1);
            }
        };
        FOR(i, 2, n) upd(1, 1, n, st[i], en[i], 1);
        vector<vector<pair<int, int>>> qr(n + 1);
        vector<vector<int>> lift(n + 1, vector<int>(19));
        FOR(i, 1, n) lift[i][0] = p[i];
        FOR(i, 1, 18) {
            FOR(j, 1, n) lift[j][i] = lift[lift[j][i - 1]][i - 1];
        } 
        function<int(int, int)> get_k =[&](int u, int k) {
            REP(i, 19) {
                if (k & (1 << i)) u = lift[u][i];
            }
            return u;
        };
        int q; cin >> q;
        vector<int> ans(q);
        REP(i, q) {
            int u, k; cin >> u >> k;
            ans[i] = min(k, dep[u]);
            k = get_k(u, k);
            if (k == 0) k = 1;
            qr[u].emplace_back(k, i); 
        }
        function<void(int, int)> process =[&] (int u, int par) {
            for (auto [k, id] : qr[u]) {
                ckmax(ans[id], get(1, 1, n, st[k], en[k]));
            }
            for (auto v : g[u]) {
                if (v == par) continue;
                re_root(u, v);
                process(v, u);
                re_root(v, u);
            }
        };
        process(1, 0);
        REP(i, q) cout << ans[i] << " ";
        cout << nl;
    }
    return 0;
}