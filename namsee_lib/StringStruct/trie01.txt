const int lg = 31;

struct Trie {
    struct Node {
        Node *child[2];
        int exist, cnt;

        Node () {
            child[0] = child[1] = NULL;
            exist = cnt = 0;
        }
    };
    
    int cur;
    Node *root;
    Trie() : cur(0) {
        root = new Node();
    };

    void add(int val) {
        Node* p = root;
        FORD(i, lg - 1, 0) {
            int c = ((val >> i) & 1);
            if (p->child[c] == NULL) p->child[c] = new Node();
            p = p->child[c];
            p->cnt++;
        }
        p->exist++;
    }

    bool find(int val) {
        Node* p = root;
        FORD(i, lg - 1, 0) {
            int c = ((val >> i) & 1);
            if (p->child[c] == NULL) return false;
            p = p->child[c];
        }
        return (p->exist != 0);
    }

    bool delete_dfs(Node *p, int val, int idx) {
        if (idx >= 0) {
            int c = ((val >> idx) & 1);
            bool is_del = delete_dfs(p->child[c], val, idx - 1);
            if (is_del) p->child[c] = NULL;
        }
        else p->exist--;

        if (p != root) {
            p->cnt--;
            if (p->cnt == 0) {
                delete(p);
                return true;
            }
        }
        return false;
    }

    void del(int val) {
        if (!find(val)) return;
        delete_dfs(root, val, lg - 1);
    }

    int get(int x) {
        int  res = 0;
        Node* p = root;
        FORD (i, lg - 1, 0) {
            int c = (x >> i) & 1;
            if (p->child[c ^ 1] != NULL) {
                res += (1ll << i);
                p = p->child[c ^ 1];
            }
            else {
                p = p->child[c];
            }
        }
        return res;
    }
};