struct Trie {
    struct Node {
        Node *child[26];
        int exist, cnt;

        Node () {
            for (int i = 0; i < 26; i++) child[i] = NULL;
            exist = cnt = 0;
        }
    };
    
    int cur;
    Node *root;
    Trie() : cur(0) {
        root = new Node();
    };

    void add(string s) {
        Node* p = root;
        for (auto ch : s) {
            int c = ch - 'a';
            if (p->child[c] == NULL) p->child[c] = new Node();

            p = p->child[c];
            p->cnt++;
        }
        p->exist++;
    }

    bool find(string s) {
        Node* p = root;
        for (auto ch : s) {
            int c = ch - 'a';
            if (p->child[c] == NULL) return false;
            p = p->child[c];
        }
        return (p->exist != 0);
    }

    bool delete_dfs(Node *p, string &s, int idx) {
        if (idx != (int)s.size()) {
            int c = s[idx] - 'a';
            bool is_del = delete_dfs(p->child[c], s, idx + 1);
            if (is_del) p->child[c] = NULL;
        }
        else p->exist--;

        if (p != root) {
            p->cnt--;
            if (p->cnt == 0) {
                delete(p);
                return true;
            }
        }
        return false;
    }

    void del(string &s) {
        if (!find(s)) return;
        delete_dfs(root, s, 0);
    }
};